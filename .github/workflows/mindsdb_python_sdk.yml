name: MindsDB Native workflow

on:
  push:
  pull_request:
    branches:
      - stable
      - staging

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.7,3.8,3.9]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip==22.0.4
        pip install -r requirements.txt
        pip install --no-cache-dir .
    - name: Run tests
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
        
          env PYTHONPATH=./ pytest tests/

        fi
      shell: bash
      env:
        CHECK_FOR_UPDATES: False
        DATABASE_CREDENTIALS_STRINGIFIED_JSON: ${{ secrets.DATABASE_CREDENTIALS }}
        CLOUD_TEST_EMAIL: ${{ secrets.CLOUD_TEST_EMAIL }}
        CLOUD_TEST_PASSWORD: ${{ secrets.CLOUD_TEST_PASSWORD }}

  coverage:
    needs: test
    if: github.ref != 'refs/heads/stable'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
          pip install -r requirements.txt

      - name: Build coverage file
        run: |
          pytest --junitxml=pytest.xml --cov-report=term-missing:skip-covered --cov=mindsdb_sdk tests/ | tee pytest-coverage.txt

      - name: Pytest coverage comment
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-coverage-path: ./pytest-coverage.txt
          junitxml-path: ./pytest.xml

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/stable'
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.7'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip==20.2.4
        pip install setuptools wheel twine
    - name: Build and publish
      env:
        TWINE_USERNAME:  __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python setup.py sdist
        twine upload dist/*
